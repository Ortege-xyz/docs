---
title: "Gold Layer"
format:
  html:
    toc: true
    html-math-method: katex
---

The primary purpose of the Gold Layer is to refine, consolidate, and curate datasets that are critical for the development and enhancement of Language Learning Models (LLM), Machine Learning (ML) models, and aggregate data models. In the rapidly evolving landscape of cryptocurrencies, the ability to derive meaningful insights from vast amounts of data is paramount. The Gold Layer is dedicated to providing a structured and enriched dataset that enables accurate modeling, forecasting, and analysis.

As cryptocurrencies continue to grow in both complexity and volume, the need for an advanced, reliable data foundation becomes increasingly important. The Gold Layer addresses this need by offering a comprehensive dataset solution that encompasses everything from individual decentralized exchange (DEX) volumes to complex, aggregated data models. This layer is not just about data storage; it's about transforming raw data into a goldmine of insights that power our language and machine learning models, as well as our innovative aggregate data models.

Our commitment to excellence is reflected in the meticulous design and functionality of the Gold Layer. By leveraging state-of-the-art technologies and methodologies, we ensure that the data within this layer is of the highest quality, accuracy, and reliability. Whether you're developing advanced ML models or seeking to consolidate numerous DEX volumes into a cohesive aggregation layer, the Gold Layer provides the essential datasets needed to drive your analytics forward.

In the following sections, we will delve deeper into the architecture and design of the Gold Layer, the types of datasets available, their use cases, and how you can access and integrate these datasets into your analytical tools and models. Join us as we explore the foundational layer that is setting new standards in cryptocurrency analytics.

# Stacks

## Proof of Transfer

### tbl_prod_gld_pox3_stackers_all
This table joins all Stacking STX transactions with all BTC reward transactions. 

It unions the following data sources:

* Stack STX via the Bitcoin chain
* BTC rewards for Stacking STX 
* Stack STX via the Stacks chain 
* Delegate STX via the Stacks chain 

#### Stack STX via the Bitcoin chain
It is possible to initiate stacking from the Bitcoin chain. We identify these transactions via the X2 magic code for Bitcoin transactions. 

#### BTC rewards for Stacking STX
To get the rewards we identify every transaction as it flows to the Stacking address. This follows the following path:
`Stacks Miner commits BTC in a transaction` -> `Track the Input of the Committed BTC` -> `Report on the output from the Input`.

For example if a Stacks miner commits 3 values of 1,2 and 5 BTC in one Bitcoin transaction, we will report all three commits separately as rewards. This is to ensure that we have a full audit trail of the supply chain of the BTC from Miners to Stackers. 

#### Stack STX via the Stacks chain
Due to the way the [POX3 contract](https://explorer.hiro.so/txid/0xf9e3ab172a3fd18da7a451b67f9ae686af04b8f520586394c597613099efc83e?chain=mainnet) was designed, getting the cycles for the `stack-extend` and `stack-increase` involves a bit of complexity. Stack extend extends an existing stack-stx transaction, so we get the cycle from the stack-extend transactions by looking at the original stack-stx transaction and it's lock cycle and then adding 1. For example if Stacker A stacked 120k STX for 5 cycles starting on cycle 60, then that will be reported as 120k STX cycle 60 and lock period of 5. But if that is then extended by 2 cycles, there will be another record returned with 120k STX for cycle 66 and a lock period of 2.

For stack-increase we use the block height of the transaction to determine the cycle the STX will be locked in. 

#### Delegate STX via the Stacks chain
The delegate-stx and delegate-stack-stx functions in PoX3 both deal with the delegation of STX tokens for Stacking, but they serve different purposes and operate in distinct contexts. 

**delegate-stx**
The delegate-stx function is used to delegate the authority to lock STX for Stacking to another address (a delegate). When a user calls delegate-stx, they specify how much STX they want to delegate, the delegate's address, an optional burn height at which the delegation expires, and an optional PoX address where the rewards should be sent. This function does not lock STX tokens itself but grants the specified delegate the permission to lock the user's STX tokens on their behalf.

Key points about delegate-stx:

* It sets up a delegation relationship allowing the delegate to later initiate Stacking on behalf of the delegator.
* It can specify a PoX address for rewards and an expiration for the delegation.
It is useful for users who wish to participate in Stacking indirectly through a service or pool.

**delegate-stack-stx**
The delegate-stack-stx function is utilized by the delegate (an address given permission via delegate-stx) to actually lock the delegated STX tokens for Stacking. This function is called after delegate-stx and is the step where the STX tokens are actually committed to Stacking. When calling delegate-stack-stx, the delegate specifies the amount of STX to lock, the PoX address for rewards, the start burn height, and the lock period (number of reward cycles).

Key points about delegate-stack-stx:

* It is used by a delegate to lock STX tokens for Stacking on behalf of a delegator.
* It requires prior setup via delegate-stx.
* It initiates the actual Stacking process using the delegated STX tokens.
* In summary, delegate-stx is about setting up the delegation relationship and granting permission, while delegate-stack-stx is about the delegate taking action to lock the delegated STX for Stacking. The former is preparatory, and the latter is the execution step in the delegation process for participating in Stacking

**Please note** If you want a true figure for Stacking, you'll need to exclude `delegate-stx` as they are committed but not finalized. We include them in this table here for completeness and an audit trail for users who are looking to debug their delegations. 

### tbl_prod_gld_pox3_stackers_solo_cycles
Each record in the table represents a unique stacking event by an individual stacker. The table records encompass a broad range of information, from basic transaction details to specific stacking parameters, such as the lock period and eligible cycles for rewards.

| Field Name               | Description                                                  |
|--------------------------|--------------------------------------------------------------|
| `hash`                   | Unique hash of the stacking transaction.                     |
| `sender_address`         | Cryptocurrency address of the stacker.                       |
| `block_number`           | Block number where the transaction was recorded.             |
| `tx_date`                | Date and time when the transaction was processed.            |
| `btc_block_height`       | Bitcoin block height at the time of the transaction.         |
| `amount`                 | Amount of cryptocurrency stacked.                            |
| `btc_reward_address_decoded` | Decoded Bitcoin address for reward eligibility.         |
| `function_name`          | Name of the smart contract function invoked.                 |
| `lock_period`            | Number of cycles the funds are locked for stacking.          |
| `start_burn_height`      | Starting burn block height for stacking.                     |
| `extend_cycle`           | Indicator for extending the lock period.                     |
| `start_cycle`            | First eligible cycle for rewards.                            |
| `end_cycle`              | Last eligible cycle for rewards.                             |
